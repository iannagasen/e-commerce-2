spring.application.name: inventory-service
server.port: 8101

# for development only
security.basic.enabled: false


spring.output.ansi.enabled: ALWAYS
logging.pattern.console: "%d{yyMMdd HH:mm:ss} %highlight(%-5level) %logger{15} - %highlight(%msg) %n"

spring.data.mongodb:
  host: localhost
  port: 27018
  database: inventory-db
  username: admin
  password: password
  authentication-database: admin


spring.cloud:
  function:
    # the name of the method to process events
    definition: orderEventRouter 
  stream:
    default.producer.useNativeEncoding: true
    bindings:
      orderEventRouter-in-0:
        destination: order-events
        group: inventory-service-group
      orderEventRouter-out-0 :
        destination: inventory-events
    kafka:
      binder:
        brokers: "localhost:9094"
        consumer-properties:
          "value.deserializer": org.springframework.kafka.support.serializer.JsonDeserializer
          "key.deserializer": org.apache.kafka.common.serialization.StringDeserializer

          # TODO: Research more on this -- should be latest to not capture earlier messages
          # "auto.offset.reset": "earliest"
          "auto.offset.reset": "latest"
          "auto.commit.interval.ms": "1000"
          # what about enable.auto.commit????


          # "bootstrap.servers": "localhost:9094"
          # ? where the DomainEvent class is located -- why? 
          # "spring.json.trusted.packages": "dev.agasen.ecom.api.core.order.event.*"
          "spring.json.trusted.packages": "*" 
        producer-properties:
          # "bootstrap.servers": "localhost:9094"
          "value.serializer": org.springframework.kafka.support.serializer.JsonSerializer
          "key.serializer": org.apache.kafka.common.serialization.StringSerializer


# app.eureka-server: localhost

# eureka:
#   client:
#     serviceUrl:
#       defaultZone: http://${app.eureka-server}:8761/eureka/
#     initialInstanceInfoReplicationIntervalSeconds: 5
#     registryFetchIntervalSeconds: 5
#   instance:
#     leaseRenewalIntervalInSeconds: 5
#     leaseExpirationDurationInSeconds: 5

---
spring.config.activate.on-profile: docker
server.port: 8080

spring.cloud:
  stream:
    kafka:
      binder:
        brokers: "kafka:9092"

spring.data.mongodb:
  host: mongodb
  port: 27017
  username: admin
  password: password
  authentication-database: admin   
